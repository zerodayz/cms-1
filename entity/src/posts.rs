//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "Posts")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub post_id: i32,
    #[serde(skip_deserializing)]
    pub post_title: String,
    #[sea_orm(column_type = "Text")]
    pub post_content: String,
    #[sea_orm(default_value = "false")]
    #[serde(default="bool::default")]
    pub post_published: bool,
    pub space_id: i32,
    #[serde(skip_deserializing)]
    pub owner_id: i32,
    #[serde(skip_deserializing)]
    pub created_at: DateTimeUtc,
    #[serde(skip_deserializing)]
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::comments::Entity")]
    Comments,
    #[sea_orm(
        belongs_to = "super::spaces::Entity",
        from = "Column::SpaceId",
        to = "super::spaces::Column::SpaceId",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Spaces,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::OwnerId",
        to = "super::users::Column::UserId",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Users,
}

impl Related<super::comments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comments.def()
    }
}

impl Related<super::spaces::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Spaces.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
