//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "Groups")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub group_id: i32,
    #[sea_orm(unique)]
    pub group_name: String,
    pub owner_id: i32,
    #[serde(skip_deserializing)]
    pub created_at: DateTimeUtc,
    #[serde(skip_deserializing)]
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::groups_spaces::Entity")]
    GroupsSpaces,
    #[sea_orm(has_many = "super::groups_users::Entity")]
    GroupsUsers,
    #[sea_orm(
    belongs_to = "super::users::Entity",
    from = "Column::OwnerId",
    to = "super::users::Column::UserId",
    on_update = "Restrict",
    on_delete = "Restrict"
    )]
    Users
}

impl Related<super::groups_spaces::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupsSpaces.def()
    }
}

impl Related<super::groups_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupsUsers.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
